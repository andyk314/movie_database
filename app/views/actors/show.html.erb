

<div class="actornameshow"><%= @actor.name.upcase %></div>
<!-- <div class="showIMG"><img  src="http://image.tmdb.org/t/p/original<%= @actor.picture %>" width="200" height="200" alt="Rainbow near Keswick" /></div> -->
<section class="quote">"<%= @actor.quote %>"</section>
<div id='warped'>
  <span class='w0'>F</span><span class='w1'>U</span><span class='w2'>N</span><span class='w3'> </span><span class='w4'>F</span><span class='w5'>A</span><span class='w6'>C</span><span class='w7'>T</span><span class='w8'>S</span><span class='w9'> </span><span class='w10'>A</span><span class='w11'>B</span><span class='w12'>O</span><span class='w13'>U</span><span class='w14'>T</span><span class='w15'> </span><span class='w16'>T</span><span class='w17'>H</span><span class='w18'>I</span><span class='w19'>S</span><span class='w20'> </span><span class='w21'>C</span><span class='w22'>E</span><span class='w23'>L</span><span class='w24'>E</span><span class='w25'>B</span><span class='w26'>R</span><span class='w27'>I</span><span class='w28'>T</span><span class='w29'>Y</span>
</div>

<div id='warped2'>
  <span class='w0'>R</span><span class='w1'>O</span><span class='w2'>T</span><span class='w3'>T</span><span class='w4'>E</span><span class='w5'>N</span><span class='w6'> </span><span class='w7'>T</span><span class='w8'>O</span><span class='w9'>M</span><span class='w10'>A</span><span class='w11'>T</span><span class='w12'>O</span><span class='w13'>E</span><span class='w14'>S</span><span class='w15'> </span><span class='w16'>S</span><span class='w17'>T</span><span class='w18'>A</span><span class='w19'>T</span><span class='w20'>I</span><span class='w21'>S</span><span class='w22'>T</span><span class='w23'>I</span><span class='w24'>C</span><span class='w25'>S</span>
</div>

<section class="bio"><%= truncate(@actor.bio, length: 500, omission: '...(more)') %></section>

<aside>
  <ol>
    <h3>Top Fresh Movies</h3>
    <li><p><%= @fresh[0].title %> - <%= @fresh[0].freshness %>%</p></li>
    <li><p><%= @fresh[2].title %> - <%= @fresh[2].freshness %>%</p></li>
    <li><p><%= @fresh[1].title %> - <%= @fresh[1].freshness %>%</p></li>
  </ol>
  <ol>
    <h3>Bottom Rotten Movies</h3>
    <li><p><%= @fresh[3].title %> - <%= @fresh[3].freshness %>%</p></li>
    <li><p><%= @fresh[4].title %> - <%= @fresh[4].freshness %>%</p></li>
    <li><p><%= @fresh[5].title %> - <%= @fresh[5].freshness %>%</p></li>
  </ol>
</aside>
<div id='warped3'>
  <span class='w0'>C</span><span class='w1'>A</span><span class='w2'>R</span><span class='w3'>E</span><span class='w4'>E</span><span class='w5'>R</span><span class='w6'> </span><span class='w7'>B</span><span class='w8'>O</span><span class='w9'>X</span><span class='w10'> </span><span class='w11'>O</span><span class='w12'>F</span><span class='w13'>F</span><span class='w14'>I</span><span class='w15'>C</span><span class='w16'>E</span><span class='w17'> </span><span class='w18'>G</span><span class='w19'>R</span><span class='w20'>O</span><span class='w21'>S</span><span class='w22'>S</span><span class='w23'>E</span><span class='w24'>S</span>
</div>
<div class="chart"></div>
<div class="btn-group" style="height 100px; width: 350px; margin: 0; auto; clear: both">
  <button type="button" class="btn btn-default" id="total">Total</button>
  <button type="button" class="btn btn-default" id="domestic">Domestic</button>
  <button type="button" class="btn btn-default" id="international">International</button>
</div>


<script>
    toggle_total();

  $(function(){$("#total").click(function(){
    $(".chart").html("");
    toggle_total();
  });

  $("#international").click(function(){
    $(".chart").html("");
    $(".chart").change(toggle_intl());
  });

  $("#domestic").click(function(){
    $(".chart").html("");
    $(".chart").change(toggle_dom());
  });
});

<!-- D3 Chart - Total Gross -->
function toggle_total() {
  var margin = {top: 30, right: 40, bottom: 70, left: 70},
      width = 960 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;

  var x = d3.scale.ordinal()
      .rangeRoundBands([0, width], .1);

  var y = d3.scale.linear()
      .range([height, 0]);

  var xAxis = d3.svg.axis()
      .scale(x)
      .orient("bottom");

  var yAxis = d3.svg.axis()
      .scale(y)
      .orient("left")
      .ticks(10);

  var tip = d3.tip()
    .attr('class', 'd3-tip')
    .offset([-10, 0])
    .html(function(d) {
      return "<strong>Revenue:</strong> <span style='color:red'>" +  formatNumber(d.total_revenue) + "</span>";
    })

  var svg = d3.select(".chart").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

   svg.call(tip);


  d3.json("http://localhost:3000/actors/<%= @actor.id %>.json", function(error, json) {
    if (error) return console.warn(error);
      actor = json;
      var data = [];
    for(var i=0; i<actor.actor.movies.length; i++){
      data.push(actor.actor.movies[i]);
    }
    console.log(data);
    x.domain(data.map(function(d) { return d.title; }));
    y.domain([0, d3.max(data, function(d) { return d.total_revenue; })]);

    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
        .selectAll("text")  
              .style("text-anchor", "end")
              .attr("dx", "-.8em")
              .attr("dy", ".15em")
              .attr("transform", function(d) {
                  return "rotate(-45)" 
                  });
     
    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
      .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("Total Revenue");
    svg.selectAll(".bar")
        .data(data)
      .enter().append("rect")
        .attr("class", "bar")
        .attr("x", function(d) { return x(d.title); })
        .attr("width", x.rangeBand())
        .attr("y", function(d) { return y(d.total_revenue); })
        .attr("height", function(d) { return height - y(d.total_revenue); })
        .on('mouseover', tip.show)
        .on('mouseout', tip.hide);

  function type(d) {
      d.total_revenue = +d.total_revenue;
    return d;
    }
  });
}; 

<!-- D3 Chart - Domestic  -->

function toggle_dom() {

  var margin = {top: 30, right: 40, bottom: 70, left: 70},
      width = 960 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;

  var x = d3.scale.ordinal()
      .rangeRoundBands([0, width], .1);

  var y = d3.scale.linear()
      .range([height, 0]);

  var xAxis = d3.svg.axis()
      .scale(x)
      .orient("bottom");

  var yAxis = d3.svg.axis()
      .scale(y)
      .orient("left")
      .ticks(10);

  var svg = d3.select(".chart").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


  d3.json("http://localhost:3000/actors/<%= @actor.id %>.json", function(error, json) {
    if (error) return console.warn(error);
      actor = json;
      var data = [];
    for(var i=0; i<actor.actor.movies.length; i++){
      data.push(actor.actor.movies[i]);
    }
    console.log(data);
    x.domain(data.map(function(d) { return d.title; }));
    y.domain([0, d3.max(data, function(d) { return d.usa_revenue; })]);

    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
        .selectAll("text")  
              .style("text-anchor", "end")
              .attr("dx", "-.8em")
              .attr("dy", ".15em")
              .attr("transform", function(d) {
                  return "rotate(-45)" 
                  });
     
    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
      .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("Domestic Revenue");
    svg.selectAll(".bar")
        .data(data)
      .enter().append("rect")
        .attr("class", "bar")
        .attr("x", function(d) { return x(d.title); })
        .attr("width", x.rangeBand())
        .attr("y", function(d) { return y(d.usa_revenue); })
        .attr("height", function(d) { return height - y(d.usa_revenue); });

  function type(d) {
      d.usa_revenue = +d.usa_revenue;
    return d;
    }
  });
}; 

<!-- D3 Chart - International Gross -->

function toggle_intl() {
  var margin = {top: 30, right: 40, bottom: 70, left: 70},
      width = 960 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;

  var x = d3.scale.ordinal()
      .rangeRoundBands([0, width], .1);

  var y = d3.scale.linear()
      .range([height, 0]);

  var xAxis = d3.svg.axis()
      .scale(x)
      .orient("bottom");

  var yAxis = d3.svg.axis()
      .scale(y)
      .orient("left")
      .ticks(10);

  var svg = d3.select(".chart").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


  d3.json("http://localhost:3000/actors/<%= @actor.id %>.json", function(error, json) {
    if (error) return console.warn(error);
      actor = json;
      var data = [];
    for(var i=0; i<actor.actor.movies.length; i++){
      data.push(actor.actor.movies[i]);
    }
    console.log(data);
    x.domain(data.map(function(d) { return d.title; }));
    y.domain([0, d3.max(data, function(d) { return d.international_revenue; })]);

    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
        .selectAll("text")  
              .style("text-anchor", "end")
              .attr("dx", "-.8em")
              .attr("dy", ".15em")
              .attr("transform", function(d) {
                  return "rotate(-45)" 
                  });
     
    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
      .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("International Revenue");
    svg.selectAll(".bar")
        .data(data)
      .enter().append("rect")
        .attr("class", "bar")
        .attr("x", function(d) { return x(d.title); })
        .attr("width", x.rangeBand())
        .attr("y", function(d) { return y(d.international_revenue); })
        .attr("height", function(d) { return height - y(d.international_revenue); });

  function type(d) {
      d.international_revenue = +d.international_revenue;
    return d;
    }
  });
}


// // D3 BUBBLE CHART

// // # node will be used to group the bubbles
//     node = svgEnter.append("g").attr("id", "bubble-nodes")
//       .attr("transform", "translate(#{margin.left},#{margin.top})")

//     // # label is the container div for all the labels that sit on top of 
//     // # the bubbles
//     // # - remember that we are keeping the labels in plain html and 
//     // #  the bubbles in svg
//     label = d3.select(this).selectAll("#bubble-labels").data([data])
//       .enter()
//       .append("div")
//       .attr("id", "bubble-labels")

// // # ---
// // # updateLabels is more involved as we need to deal with getting the sizing
// // # to work well with the font size
// // # ---
// updateLabels = () ->
//   // # as in updateNodes, we use idValue to define what the unique id for each data 
//   // # point is
//   label = label.selectAll(".bubble-label").data(data, (d) -> idValue(d))

// // # labels are anchors with div's inside them
//     // # labelEnter holds our enter selection so it 
//     // # is easier to append multiple elements to this selection
//     labelEnter = label.enter().append("a")
//       .attr("class", "bubble-label")
//       .attr("href", (d) -> "##{encodeURIComponent(idValue(d))}")
//       .call(force.drag)
//       .call(connectEvents)

//     labelEnter.append("div")
//       .attr("class", "bubble-label-name")
//       .text((d) -> textValue(d))

//     labelEnter.append("div")
//       .attr("class", "bubble-label-value")
//       .text((d) -> rValue(d))

// // # first set the font-size and cap the maximum width to enable word wrapping
//     label
//       .style("font-size", (d) -> Math.max(8, rScale(rValue(d) / 2)) + "px")
//       .style("width", (d) -> 2.5 * rScale(rValue(d)) + "px")

//     // # now we need to adjust if the width set is too big for the text
//     // # do this using a temporary span
//     label.append("span")
//       .text((d) -> textValue(d))
//       .each((d) -> d.dx = Math.max(2.5 * rScale(rValue(d)), this.getBoundingClientRect().width))
//       .remove()

//     // # reset the width of the label to the actual width
//     label
//       .style("width", (d) -> d.dx + "px")

//     // # compute 'dy' - the value to shift the text from the top
//     label.each((d) -> d.dy = this.getBoundingClientRect().height)

//  // # As the labels are created in raw html and not svg, we need
//     // # to ensure we specify the 'px' for moving based on pixels
//     label
//       .style("left", (d) -> ((margin.left + d.x) - d.dx / 2) + "px")
//       .style("top", (d) -> ((margin.top + d.y) - d.dy / 2) + "px")

//  // # ---
//  //  # changes clicked bubble by modifying url
//  //  # ---
//   click = (d) ->
//     location.replace("#" + encodeURIComponent(idValue(d)))
//     d3.event.preventDefault()

// // # automatically call hashchange when the url has changed
//       d3.select(window)
//         .on("hashchange", hashchange)  

//   // # ---
//   // # called when url after the # changes
//   // # ---
//   hashchange = () ->
//     id = decodeURIComponent(location.hash.substring(1)).trim()
//     updateActive(id)

//   // # ---
//   // # activates new node
//   // # ---
//   updateActive = (id) ->
//     node.classed("bubble-selected", (d) -> id == idValue(d))
//     // # if no node is selected, id will be empty
//     if id.length > 0
//       d3.select("#status").html("<h3>The word <span class=\"active\">#{id}</span> is now active</h3>")
//     else
//       d3.select("#status").html("<h3>No word is active</h3>")       

</script>


